from itertools import tee, izip, islice
s="TTCTCTGTATAACGTGTTGGCTGCGTGCACAAGTGCGGGTAGTTTCAGGACACGCCTATAATACTCCTAGCTTACACCAATTGTCGGAAGCATCAACATGCATAAGAGTTTCTCTGCGACCACAGAACCATTCCCCAAGTAAGCAAAACGTAATTGTCGCCTTAAATCGTTACAACGTCCGGGGTGCCTTACAACACACATAACCGTACAGCTCCAGGATTTTTCAGCGCGTGTACTTGTAATTCCGGTCCCAGGAATACAGCGTATCCATCATGATATCTTCACGGCACATCTTTTGCTACATACGTGGCGCCATGAGGTCTTGGGTTCAACGATTAGATGTCTATCCGCTGCTACGGTCCGGTTGGCCATTTGCAGTGCAGGCTCGATGATGTGCGAGGCGCCTAGTGCCTACCCACCTATGCTTAGTCGATGTTCACGGCGACCCGCCCCGCCTCTTAGCTAAGAGGCGGGGCGGGTCGCCGTGAACATCGGCGCCGCGCAAGCAGCTACGGGAACCCAGGTCGGTCGCCAGGACTCGTTTGGGAGACTGCCGAACCCTCAGTAGCCAAGGGTAGCCCAGCCTCAACTTAAGTTGCGCCTCATAAGTACCTAGTACAACGGACGAATCGTTACACGAGAATTGCATTTAACGTAGATCCTTTGTAACCGTTCATCCATTCGGCCGCGTACCCTAATATTAATACGGGTGGTCTGACTGTCCTTGGCGTCCGTGACTGGACGGGAATGAAACAAAGTGTGCTTGTGCAGTTGTTAAATCAGCCGGCGCATATTAAGTATTCGGCTGAGGCCATCCTGGCAGACGGTTTACTATGACAACTTGGCTTAAATTCAGCAGTTGATCCAGCGTGTGAGTGACTCAGATGCGCACCGGCAAGCATTTTACAATTCGGCACGCTTACG"
t="CGTAAGCGTGCCGAATTGTAAAATGCTTGCCGGTGCGCATCTGAGTCACTCACACGCTGGATCAACTGCTGAATTTAAGCCAAGTTGTCATAGTAAACCGTCTGCCAGGATGGCCTCAGCCGAATACTTAATATGCGCCGGCTGATTTAACAACTGCACAAGCACACTTTGTTTCATTCCCGTCCAGTCACGGACGCCAAGGACAGTCAGACCACCCGTATTAATATTAGGGTACGCGGCCGAATGGATGAACGGTTACAAAGGATCTACGTTAAATGCAATTCTCGTGTAACGATTCGTCCGTTGTACTAGGTACTTATGAGGCGCAACTTAAGTTGAGGCTGGGCTACCCTTGGCTACTGAGGGTTCGGCAGTCTCCCAAACGAGTCCTGGCGACCGACCTGGGTTCCCGTAGCTGCTTGCGCGGCGCCGATGTTCACGGCGACCCGCCCCGCCTCTTAGCTAAGAGGCGGGGCGGGTCGCCGTGAACATCGACTAAGCATAGGTGGGTAGGCACTAGGCGCCTCGCACATCATCGAGCCTGCACTGCAAATGGCCAACCGGACCGTAGCAGCGGATAGACATCTAATCGTTGAACCCAAGACCTCATGGCGCCACGTATGTAGCAAAAGATGTGCCGTGAAGATATCATGATGGATACGCTGTATTCCTGGGACCGGAATTACAAGTACACGCGCTGAAAAATCCTGGAGCTGTACGGTTATGTGTGTTGTAAGGCACCCCGGACGTTGTAACGATTTAAGGCGACAATTACGTTTTGCTTACTTGGGGAATGGTTCTGTGGTCGCAGAGAAACTCTTATGCATGTTGATGCTTCCGACAATTGGTGTAAGCTAGGAGTATTATAGGCGTGTCCTGAAACTACCCGCACTTGTGCACGCAGCCAACACGTTATACAGAGAA"
d = {"ATT": "I",
"ATC": "I",
"ATA": "I",
"CTT": "L",
"CTC": "L",
"CTA": "L",
"CTG": "L",
"TTA": "L",
"TTG": "L",
"GTT": "V",
"GTC": "V",
"GTA": "V",
"GTG": "V",
"TTT": "F",
"TTC": "F",
"ATG": "M",
"TGT": "C",
"TGC": "C",
"GCT": "A",
"GCC": "A",
"GCA": "A",
"GCG": "A",
"GGT": "G",
"GGC": "G",
"GGA": "G",
"GGG": "G",
"CCT": "P",
"CCC": "P",
"CCA": "P",
"CCG": "P",
"ACT": "T",
"ACC": "T",
"ACA": "T",
"ACG": "T",
"TCT": "S",
"TCC": "S",
"TCA": "S",
"TCG": "S",
"AGT": "S",
"AGC": "S",
"TAT": "Y",
"TAC": "Y",
"TGG": "W",
"CAA": "Q",
"CAG": "Q",
"AAT": "N",
"AAC": "N",
"CAT": "H",
"CAC": "H",
"GAA": "E",
"GAG": "E",
"GAT": "D",
"GAC": "D",
"AAA": "K",
"AAG": "K",
"CGT": "R",
"CGC": "R",
"CGA": "R",
"CGG": "R",
"AGA": "R",
"AGG": "R"}
l=range(len(s))
a=l[::3]
a1=l[::3]
seg=[ ]
seg1=[ ]
seg2=[ ]
seg3=[ ]
seg4=[ ]
seg5=[ ]
final=[ ]
for i in a:
	seg.append(s[i:i+3])
	seg2.append(s[i+1:i+4])
	seg4.append(s[i+2:i+5])
for i in a1:
	seg1.append(t[i:i+3])
	seg3.append(t[i+1:i+4])
	seg5.append(t[i+2:i+5])
print seg
print seg1
def prot(j, q):
	p=""
	for i in range(q, len(j)):
		if j[i] in d:
			p+=d[j[i]]
		elif j[i]=="TAG" or j[i]=="TAA" or j[i]=="TGA":
			if p not in final:
				final.append(p)
			p=""
			break
for n in range(len(seg)):
	if seg[n]=="ATG": 
		prot(seg, n)
for n in range(len(seg1)):
	if seg1[n]=="ATG": 
		prot(seg1, n)
for n in range(len(seg2)):
	if seg2[n]=="ATG": 
		prot(seg2, n)
for n in range(len(seg3)):
	if seg3[n]=="ATG": 
		prot(seg3, n)
for n in range(len(seg4)):
	if seg4[n]=="ATG": 
		prot(seg4, n)
for n in range(len(seg5)): 
	if seg5[n]=="ATG": 
		prot(seg5, n)
for z in final:
	print z
